# -*- coding: utf-8 -*-
"""Welcome to Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Streamlit app title
st.title("GDP Analysis and Prognostication")

# File uploader
uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.write("### Data Preview")
    st.dataframe(df.head())

# Select country for visualization and prediction
selected_country = st.selectbox("Select a Country", df["Country Name"].unique())

def plot_gdp_trend(country):
    subset = df[df["Country Name"] == country]
    chart = alt.Chart(subset).mark_line().encode(
        x="Year:O",
        y="GDP:Q",
        tooltip=["Year", "GDP"]
    ).properties(
        width=700,
        height=400,
        title=f"GDP Trend for {country}"
    )
    st.altair_chart(chart, use_container_width=True)

plot_gdp_trend(selected_country)

def plot_gdp_bar(year):
    df_year = df[df["Year"] == year].nlargest(10, "GDP")
    chart = alt.Chart(df_year).mark_bar().encode(
        x="GDP:Q",
        y=alt.Y("Country Name:N", sort="-x"),
        tooltip=["Country Name", "GDP"]
    ).properties(
        width=700,
        height=400,
        title=f"Top 10 Economies by GDP in {year}"
    )
    st.altair_chart(chart, use_container_width=True)

year = st.slider("Select Year for GDP Comparison", 1960, 2023, 2023)
plot_gdp_bar(year)

# Machine Learning Model - LSTM for Time Series Forecasting
data = df[df["Country Name"] == selected_country][["Year", "GDP"]].dropna()
scaler = MinMaxScaler()
data["GDP"] = scaler.fit_transform(data[["GDP"]])

# Preparing data for LSTM
X, y = [], []
for i in range(10, len(data)):
    X.append(data["GDP"].iloc[i-10:i].values)
    y.append(data["GDP"].iloc[i])
X, y = np.array(X), np.array(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Define LSTM Model
model = Sequential([
    LSTM(50, activation='relu', input_shape=(10, 1), return_sequences=True),
    LSTM(50, activation='relu'),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')

# Train Model
if st.button("Train Model"):
    model.fit(X_train, y_train, epochs=50, batch_size=8, verbose=1)
    st.success("Model Trained Successfully")

# Select number of years for prediction
future_years = st.slider("Select number of years to predict", 1, 77, 10)
years = list(range(2024, 2024 + future_years))

# Predict GDP
predictions = []
last_10 = list(data["GDP"].iloc[-10:].values)
for _ in years:
    pred = model.predict(np.array(last_10).reshape(1, 10, 1))
    predictions.append(pred[0, 0])
    last_10.pop(0)
    last_10.append(pred[0, 0])

# Convert predictions back to actual GDP
predictions = scaler.inverse_transform(np.array(predictions).reshape(-1, 1))

# Plot Predictions
st.subheader("GDP Prediction")
pred_df = pd.DataFrame({"Year": years, "Predicted GDP": predictions.flatten()})
chart = alt.Chart(pred_df).mark_line().encode(
    x="Year:O",
    y="Predicted GDP:Q",
    tooltip=["Year", "Predicted GDP"]
).properties(
    width=700,
    height=400,
    title=f"GDP Prediction for {selected_country}"
)
st.altair_chart(chart, use_container_width=True)